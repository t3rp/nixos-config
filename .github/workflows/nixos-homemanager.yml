name: Home Manager on NixOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-nixos-home-manager:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix with flakes support
      uses: cachix/install-nix-action@v23
      with:
        nix_path: nixpkgs=channel:nixos-24.11
        extra_nix_config: |
          experimental-features = nix-command flakes
          
    - name: Setup NixOS environment simulation
      run: |
        # Create fake NixOS marker to simulate NixOS environment
        sudo mkdir -p /etc
        sudo touch /etc/NIXOS
        
        # Simulate systemd environment
        sudo mkdir -p /run/current-system/sw/share
        
    - name: Test flake evaluation
      run: |
        # Test that the flake can be evaluated
        nix flake check --no-build
        
        # Test evaluation of NixOS configuration (without --dry-run)
        nix eval .#nixosConfigurations.ares.config.system.stateVersion --raw
        
        # Verify the flake outputs exist
        nix flake show
        nix build .#nixosConfigurations.ares.config.system.build.toplevel --dry-run
        
    - name: Install Home Manager via flake
      run: |
        # Install home-manager with flakes support
        nix profile install nixpkgs#home-manager
        
    - name: Test Home Manager configuration with flake
      run: |
        # Set username to match your NixOS config
        export USER=terp
        export HOME=/home/terp
        
        # Create home directory
        sudo mkdir -p /home/terp
        sudo chown runner:runner /home/terp
        
        cd users
        # Test the configuration builds without applying
        home-manager build -f common.nix --dry-run
        
        # Apply the configuration with backup
        home-manager switch -f common.nix -b backup
        
    - name: Verify NixOS-specific features
      run: |
        export USER=terp
        export HOME=/home/terp
        
        # Check that shell aliases work
        source ~/.bashrc
        echo "nixswitch alias: $(alias nixswitch 2>/dev/null || echo 'not found')"
        echo "homeswitch alias: $(alias homeswitch 2>/dev/null || echo 'not found')"
        
        # Verify Nix packages are installed
        echo "Checking core packages:"
        which git && echo "✓ Git installed" || echo "✗ Git missing"
        which starship && echo "✓ Starship installed" || echo "✗ Starship missing"
        which neovim && echo "✓ Neovim installed" || echo "✗ Neovim missing"
        
    - name: Test flake rebuild simulation
      run: |
        export USER=terp
        export HOME=/home/terp
        
        # Test that nixswitch command would work
        echo "Testing nixswitch alias functionality..."
        cd /home/terp/nixos-config
        
        # Simulate what nixswitch would do (without sudo)
        nix flake check --no-build
        
        # Test evaluation instead of dry-run
        nix eval .#nixosConfigurations.ares.config.system.stateVersion --raw
        echo ""
        echo "✓ NixOS flake configuration is valid"
        
    - name: Verify Home Manager integration
      run: |
        export USER=terp
        export HOME=/home/terp
        
        # Check Home Manager generations
        home-manager generations | head -5
        
        # Verify configuration files are linked
        ls -la ~/.config/ | grep -E "(sway|waybar|alacritty)" || echo "Config dirs not found (expected in CI)"
        
        # Check that scripts and functions are linked
        ls -la ~/.bin/ | head -5 || echo "Scripts not found"
        ls -la ~/.bash_functions/ | head -5 || echo "Functions not found"
        
    - name: Test configuration rollback
      run: |
        export USER=terp
        export HOME=/home/terp
        
        # Test rollback functionality
        echo "Testing Home Manager rollback..."
        home-manager generations
        
        # Note: We can't actually rollback in CI since there's only one generation
        echo "✓ Rollback functionality available"