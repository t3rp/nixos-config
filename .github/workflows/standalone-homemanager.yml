name: Test Home Manager Configuration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-home-manager:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix Unstable
      uses: cachix/install-nix-action@v23
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          
    - name: Verify Nix Installation
      run: |
        nix --version
        nix-env --version
        nix-channel --list
        echo "NIX_PATH: $NIX_PATH"
        
    - name: Install Home Manager
      run: |
        # Use release-24.11 to match your nixpkgs version
        nix-channel --add https://github.com/nix-community/home-manager/archive/release-24.11.tar.gz home-manager
        nix-channel --update
        export NIX_PATH=$HOME/.nix-defexpr/channels:$NIX_PATH
        nix-shell '<home-manager>' -A install
        
    - name: Verify Home Manager Installation
      run: |
        export NIX_PATH=$HOME/.nix-defexpr/channels:$NIX_PATH
        which home-manager
        home-manager --version
        nix-channel --list | grep home-manager
        
    - name: Set CI environment variable
      run: |
        echo "CI=true" >> $GITHUB_ENV
        
    - name: Test Home Manager configuration
      run: |
        export NIX_PATH=$HOME/.nix-defexpr/channels:$NIX_PATH
        cd users/terp
        # Use backup flag to handle existing files
        home-manager switch -f home.nix -b backup
        
    - name: Verify Nix packages are installed
      run: |
        # Check if programs from home.nix are available and from Nix store
        echo "Checking git installation:"
        which git
        git --version
        ls -la $(which git)
        
        echo "Checking if git is from Nix store:"
        readlink $(which git) | grep -q "/nix/store" && echo "✓ Git is from Nix store" || echo "✗ Git is NOT from Nix store"
        
        echo "Checking VSCode installation (should be skipped in CI):"
        which code || echo "VSCode not found (expected in CI)"
        
        echo "Checking starship installation:"
        which starship
        starship --version
        readlink $(which starship) | grep -q "/nix/store" && echo "✓ Starship is from Nix store" || echo "✗ Starship is NOT from Nix store"
        
        echo "Checking basic CLI tools:"
        which neofetch && echo "✓ neofetch found" || echo "✗ neofetch not found"
        which btop && echo "✓ btop found" || echo "✗ btop not found"
        which jq && echo "✓ jq found" || echo "✗ jq not found"
        
    - name: Verify Home Manager managed files
      run: |
        # Check if Home Manager created the expected symlinks
        echo "Checking Home Manager managed files:"
        ls -la ~/.config/ || echo "No .config directory"
        ls -la ~/.nix-profile/bin/ | head -10
        
        echo "Checking if dotfiles are properly linked:"
        test -L ~/.config/sway/config && echo "✓ Sway config linked" || echo "Note: Sway config not linked (expected in CI)"
        test -L ~/.config/alacritty/alacritty.toml && echo "✓ Alacritty config linked" || echo "Note: Alacritty config not linked (expected in CI)"
        
        echo "Checking shell configuration:"
        test -f ~/.bashrc && echo "✓ .bashrc exists" || echo "✗ .bashrc missing"
        
        echo "Checking git configuration:"
        git config user.name || echo "Git user.name not set"
        git config user.email || echo "Git user.email not set"
        
    - name: Final verification summary
      run: |
        echo "=== FINAL VERIFICATION ==="
        echo "Home Manager version: $(home-manager --version)"
        echo "Nix-managed programs in PATH:"
        echo $PATH | tr ':' '\n' | grep nix-profile || echo "No nix-profile in PATH"
        echo "Total packages installed by Home Manager:"
        nix-env --query | wc -l